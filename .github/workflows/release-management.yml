name: Reusable Release Management

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: "The version number for the release"
      repository:
        required: true
        type: string
        description: "The repository name in format owner/repo"
      package_name:
        required: true
        type: string
        description: "The package name for the release"
      is_prerelease:
        required: false
        type: boolean
        default: false
        description: "Whether this is a prerelease"
      send_teams_notification:
        required: false
        type: boolean
        default: false
        description: "Whether to send Teams notification"
    secrets:
      GITHUB_TOKEN:
        required: true
      POWER_AUTOMATE_WEBHOOK_URL:
        required: false

jobs:
    release-management:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
                token: ${{ secrets.GITHUB_TOKEN }}

            - name: Fetch all tags
              run: git fetch --force --tags

            - name: Get all PRs since last release
              id: get_prs
              run: |
                # Find the last two stable version tags
                LATEST_TAGS=$(git tag --sort=-v:refname | grep -v -- '-' | head -n 2 || echo "")

                # The first one is the current tag being created
                CURRENT_TAG=$(echo "$LATEST_TAGS" | head -n 1)
                # The second one is the previous stable tag
                PREVIOUS_STABLE_TAG=$(echo "$LATEST_TAGS" | tail -n 1)

                echo "Current tag being created: $CURRENT_TAG"
                echo "Previous stable tag: $PREVIOUS_STABLE_TAG"

                # If no previous tag found, use a date from 30 days ago
                if [ -z "$PREVIOUS_STABLE_TAG" ]; then
                    echo "No previous tag found, using 30 days ago as reference"
                    START_DATE=$(date -d "30 days ago" +%Y-%m-%d)
                else
                    # Get date from the previous tag
                    START_DATE=$(git log -1 --format=%ad --date=short $PREVIOUS_STABLE_TAG)
                    echo "Using date from previous stable tag: $START_DATE"
                fi

                # Write outputs for the next steps
                echo "start_date=$START_DATE" >> $GITHUB_OUTPUT
                echo "latest_tag=$PREVIOUS_STABLE_TAG" >> $GITHUB_OUTPUT

            - id: build_changelog
              name: "Build Changelog"
              uses: mikepenz/release-changelog-builder-action@v4
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                fromTag: ${{ steps.get_prs.outputs.latest_tag || '' }}
                toTag: ${{ github.sha }}
                configurationJson: |
                    {
                    "template": "#{{CHANGELOG}}\n\n<details>\n<summary>Uncategorized</summary>\n\n#{{UNCATEGORIZED}}\n</details>",
                    "categories": [
                        {
                            "title": "## 🔥 Breaking Changes",
                            "labels": ["breaking-change", "major"]
                        },
                        {
                            "title": "## 🚀 Features",
                            "labels": ["enhancement", "javascript", "minor", "feat"],
                            "exhaustive": false
                        },
                        {
                            "title": "## 🐛 Issues & Tasks",
                            "labels": ["bug", "patch", "fix"],
                            "exhaustive": false
                        },
                        {
                            "title": "## 🏗 Maintenance",
                            "labels": ["maintenance", "documentation", "dependencies", "chore", "refactor", "test"],
                            "exhaustive": false
                        }
                    ],
                    "transformers": [
                        {
                        "pattern": "^feat: (.*)$",
                        "target": "🚀 $1"
                        },
                        {
                        "pattern": "^fix: (.*)$",
                        "target": "🐛 $1"
                        },
                        {
                        "pattern": "^chore: (.*)$",
                        "target": "🏗 $1"
                        },
                        {
                        "pattern": "^PR (.*) to (.*)$",
                        "target": "🔄 Merge from $1 to $2"
                        }
                    ],
                    "base_branches": ["main", "develop"],
                    "sort": {
                        "order": "ASC",
                        "on_property": "mergedAt"
                    },
                    "max_tags_to_fetch": 200,
                    "max_pull_requests": 200,
                    "max_back_track_time_days": 365,
                    "enable_prereleases": false
                    }

            - id: create-release
              name: Create Release
              uses: im-open/create-release@v3.1.3
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                tag-name: ${{ inputs.version }}
                commitish: ${{ github.ref }}
                body: ${{ steps.build_changelog.outputs.changelog }}
                prerelease: ${{ inputs.is_prerelease }}
                delete-existing-release: true

            - name: Check if Teams notification should be sent
              id: check_notification
              run: |
                if [[ "${{ inputs.send_teams_notification }}" == "true" && "${{ secrets.POWER_AUTOMATE_WEBHOOK_URL }}" != "" ]]; then
                    echo "SEND_NOTIFICATION=true" >> $GITHUB_OUTPUT
                else
                    echo "SEND_NOTIFICATION=false" >> $GITHUB_OUTPUT
                    if [[ "${{ inputs.send_teams_notification }}" == "true" && "${{ secrets.POWER_AUTOMATE_WEBHOOK_URL }}" == "" ]]; then
                      echo "Warning: Teams notification requested but POWER_AUTOMATE_WEBHOOK_URL secret is not set."
                    fi
                fi

            - name: Send Teams Notification via Power Automate
              if: steps.check_notification.outputs.SEND_NOTIFICATION == 'true'
              uses: fjogeleit/http-request-action@v1
              with:
                url: ${{ secrets.POWER_AUTOMATE_WEBHOOK_URL }}
                method: 'POST'
                contentType: 'application/json'
                data: |
                    {
                    "packageName": "${{ inputs.package_name }}",
                    "version": "${{ inputs.version }}",
                    "repository": "${{ inputs.repository }}",
                    "actor": "${{ github.actor }}",
                    "releaseUrl": "https://github.com/${{ inputs.repository }}/releases/tag/${{ inputs.version }}",
                    "isPrerelease": ${{ inputs.is_prerelease }},
                    "changelog": ${{ toJSON(steps.build_changelog.outputs.changelog) }}
                    }